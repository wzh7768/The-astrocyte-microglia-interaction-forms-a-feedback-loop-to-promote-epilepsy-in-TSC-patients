#hdWGCNA analysis
library(tidyverse)
library(cowplot)
library(patchwork)
library(igraph)
library(WGCNA)
library(hdWGCNA)
seurat_obj <- SetupForWGCNA(
TSC_MA,
gene_select = "fraction",
fraction = 0.01,
wgcna_name = ""
)
length(seurat_obj@misc$tutorial$wgcna_genes) #[1] 12639
#Creating metacells
MetacellsByGroups(
seurat_obj,
group.by = c("labers"),
ident.group = "labers",
k = 25,
reduction = "pca",
assay = NULL,
cells.use = NULL,
slot = "counts",
mode = "average",
min_cells = 100,
max_shared = 15,
target_metacells = 1000,
max_iter = 5000,
verbose = FALSE,
wgcna_name = NULL
)

construct metacells in each group
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c("labers", "orig.ident"),
k = 25,
reduction = "harmony",
slot='counts',
max_shared = 10,
ident.group = 'labers'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
metacell_obj <- GetMetacellObject(seurat_obj)
table(seurat_obj$labers,seurat_obj$orig.ident)
table(metacell_obj$labers,metacell_obj$orig.ident)
#Co-expression network analysis
#hdwgcna isolated cell subclusters
seurat_obj <- SetDatExpr(
seurat_obj,
group_name = c('','',''...),
group.by='labers',
assay = "SCT",
use_metacells = TRUE,
slot = 'data'
)
#Selecting the soft threshold value
seurat_obj <- TestSoftPowers(
seurat_obj,
setDatExpr=FALSE,
powers = c(seq(1, 10, by = 1), seq(12, 30, by = 2)))
plot_list <- PlotSoftPowers(seurat_obj,
point_size = 5,
text_size = 3)
wrap_plots(plot_list, ncol=2)
#Calculate the topological overlap matrixé˜µ
#Useing the TOM matrix to reflect the similarity of gene expression.
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
setDatExpr=FALSE,
corType = "pearson",
networkType = "signed",
TOMType = "signed",
detectCutHeight = 0.995,
minModuleSize = 5,
mergeCutHeight = 0.2,
tom_outdir = "TSC_MA_TOM",
tom_name = 'MA'
)
PlotDendrogram(seurat_obj, main='MA hdWGCNA Dendrogram')

need to run ScaleData first or else harmony throws an error:
seurat_obj <- ScaleData(seurat_obj, features=VariableFeatures(seurat_obj))
#Calculateing the module eigengenes.
seurat_obj <- ModuleEigengenes(
seurat_obj,
scale.model.use = "linear",
assay = "SCT",
pc_dim = 1,
group.by.vars="orig.ident"
)

harmonized module eigengenes:
hMEs <- GetMEs(seurat_obj)

module eigengenes:
MEs <- GetMEs(seurat_obj, harmonized=FALSE)
#hubgenes
seurat_obj <- ModuleConnectivity(
seurat_obj,
group.by = 'labers',
corFnc = "bicor",
corOptions = "use='p'",
harmonized = TRUE,
assay = NULL,
slot = "data",
group_name = c('','','',''....)
)
seurat_obj <- ResetModuleNames(
seurat_obj,
new_name = "MA-M"
)
modules <- GetModules(seurat_obj)
print(levels(modules$module))
head(modules[,1:6])
p <- PlotKMEs(seurat_obj,
ncol=5,
n_hubs = 10,
text_size = 2,
plot_widths = c(3, 2)
)
p

get hub genes
hub_df <- GetHubGenes(seurat_obj, n_hubs = 10)
write.csv(hub_df,file='TSC_MA hub_df.csv')
head(hub_df)
seurat_obj <- ModuleExprScore(
seurat_obj,
n_genes = 15,
method='Seurat'
)

make a featureplot of hMEs for each module
plot_list <-ModuleFeaturePlot(
seurat_obj,
reduction = "umap",
features = "hMEs",
order_points = TRUE, # order so the points with highest hMEs are on top
restrict_range = TRUE,
point_size = 0.5,
alpha = 1,
label_legend = FALSE,
raster_dpi = 500,
raster_scale = 1,
plot_ratio = 1,
title = TRUE
)

stitch together with patchwork
wrap_plots(plot_list, ncol=3)
plot_list <- ModuleFeaturePlot(
seurat_obj,
features='scores', # plot the hub gene scores
order='shuffle', # order so cells are shuffled
ucell = TRUE # depending on Seurat vs UCell for gene scoring
)

stitch together with patchwork
wrap_plots(plot_list, ncol=3)
#Calculating module correlations
ModuleCorrelogram(seurat_obj,
exclude_grey = TRUE,
features = "hMEs",
col = colorRampPalette(c('#006B7B','#18AF6E','#F6D704'))(50)
)
#Visualization
MEs <- GetMEs(seurat_obj, harmonized=TRUE)
mods <- colnames(MEs); mods <- mods[mods != 'grey']

add hMEs to Seurat meta-data:
seurat_obj@meta.data <- cbind(seurat_obj@meta.data, MEs)
p <- DotPlot(seurat_obj, features=mods, group.by = 'labers')

flip the x/y axes, rotate the axis labels, and change color scheme:
p <- p +
coord_flip() +
RotatedAxis() +
scale_color_gradient2(high='red', mid='grey95', low='blue')
p
#Network plot of an individual module.

Visualizes the top hub genes for selected modules as a circular network plot
ModuleNetworkPlot(
seurat_obj,
mods = "all",
outdir = "ModuleNetworks",
plot_size = c(10, 10),
label_center = FALSE,
edge.alpha = 0.25,
vertex.label.cex = 1,
vertex.size = 6
)
HubGeneNetworkPlot(
seurat_obj,
mods = "all",
n_hubs = 5,
n_other=10,
edge_prop = 0.75,
)
#UMAP network plot
seurat_obj <- RunModuleUMAP(
seurat_obj,
n_hubs = 5,
n_neighbors=10,
min_dist=0.1
)
umap_df <- GetModuleUMAP(seurat_obj)
